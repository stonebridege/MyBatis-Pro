<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在Java程序中，必须找到当前的Mapper配置文件，才能进一步找到这里配置的SQL语句 -->
<!-- Java程序就是通过mapper标签的namespace属性找到当前Mapper配置文件 -->
<!-- 将来为了让一个Java接口，直接对应这个Mapp|er配置文件，通常使用Java接口的全类名作为这个namespace属性的值 -->
<!-- 以前我们叫dao，现在叫mapper，本质上都是持久化层的类型，只是命名习惯的区别 -->
<mapper namespace="com.stonebridge.MyBatis.dao.EmployeeMapper">

    <!--    List<Emp> selectEmpByCondition(Map map);-->
    <select id="selectEmpByCondition" resultType="com.stonebridge.MyBatis.domain.Emp">
        select emp_id, emp_name, emp_salary
        from t_emp
        <!-- 使用where标签动态生成SQL语句中的where子句 -->
        <!-- where标签的效果1：如果where标签内没有有效的条件，那么最终的SQL语句中，不会出现where关键词 -->
        <!-- where标签的效果2：能够去除查询条件中前后多余的and或or -->
        <where>
            <!-- 使用if标签可以让SQL语句的片段，在满足条件时才加入最终的SQL语句 -->
            <!-- test属性：if标签中的判断条件。在test属性中能直接访问接口抽象方法传入的数据 -->
            <if test="empName!=null">
                or emp_name=#{empName}
            </if>
            <!-- test属性：在条件判断语句中，难免会用到大于号、小于号。此时需要将大于号、小于号转义(&lt;)。 -->
            <if test="empSalary &gt; 100">
                or emp_salary=#{empSalary}
            </if>
            <!-- 第一种情况：两个条件都满足 -->
            <!-- 第二种情况：empName满足，empSalary不满足 -->
            <!-- 第三种情况：empName不满足，empSalary满足 -->
            <!-- 第四种情况：两个条件都不满足 -->
        </where>
    </select>
    <!--    Integer updateEmpConditional(Map<String, Object> map);-->
    <update id="updateEmpConditional">
        update t_emp
        <set>
            <if test="empName!=null">
                emp_name=#{empName},
            </if>
            <!-- test属性：在条件判断语句中，难免会用到大于号、小于号。此时需要将大于号、小于号转义(&lt;)。 -->
            <if test="empSalary &gt; 100">
                emp_salary=#{empSalary},
            </if>
        </set>
        where emp_id=25
    </update>

    <!-- List<Emp> selectEmpByConditionByTrim(Emp condition); -->
    <select id="selectEmpByConditionByTrim" resultType="com.stonebridge.MyBatis.domain.Emp">
        select emp_id, emp_name, emp_salary from t_emp
        <!-- trim标签内部如果有条件，则where会出现，否则where不出现 -->
        <!-- 整个条件部分，如果在后面有多出来的“and或or”会被自动去掉 -->
        <trim prefix="where" prefixOverrides="and|or">
            <!-- 使用if标签可以让SQL语句的片段，在满足条件时才加入最终的SQL语句 -->
            <!-- test属性：if标签中的判断条件。在test属性中能直接访问接口抽象方法传入的数据 -->
            <if test="empName != null">
                or emp_name=#{empName}
            </if>

            <!-- test属性：在条件判断语句中，难免会用到大于号、小于号。此时需要将大于号、小于号转义。 -->
            <if test="empSalary &gt; 2000">
                and emp_salary>#{empSalary}
            </if>
        </trim>
    </select>


    <!-- 如果接口形参位置没有使用@Param注解，而且foreach标签也没有使用默认名称，会抛出下面异常： -->
    <!-- Caused by: org.apache.ibatis.binding.BindingException: Parameter 'empList' not found. Available parameters are [arg0, collection, list] -->
    <!-- 为了代码可读性更好，还是加上@Param注解比较好 -->
    <!-- void batchInsert(@Param("empList") List<Emp> empList); -->
    <insert id="batchInsert">
        insert into t_emp(emp_name, emp_salary)
        <!-- collection属性：指定要遍历的集合 -->
        <!-- item属性：给遍历出来的每一个对象起个名字，便于引用 -->
        <!-- index属性：获取遍历过程中每一个元素的索引值 -->
        <!-- separator属性：每个循环体生成的字符串之间的分隔符 -->
        <!-- open属性：针对整个foreach标签生成的字符串整体，要加到前面的字符串 -->
        <!-- close属性：针对整个foreach标签生成的字符串整体，要加到后面的字符串 -->
        <foreach collection="empList" item="emp" separator="," open="values">
            (#{emp.empName},#{emp.empSalary})
        </foreach>
    </insert>
</mapper>