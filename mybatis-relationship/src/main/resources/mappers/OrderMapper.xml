<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper是根标签。namespace属性是找到当前配置的依据 -->
<!-- 由于最理想的Mybatis使用方式是：通过Mapper接口调用接口方法，访问数据库 -->
<!-- 这样的理想方式要求：能够通过接口全类名找到Mapper配置 -->
<!-- 所以：我们就用Mapper接口的全类名来给namespace属性赋值 -->
<mapper namespace="com.stonebridge.mybatis.mapper.OrderMapper">
    <select id="selectOrderById" resultType="com.stonebridge.mybatis.entity.Order">
        select order_id, order_name, customer_id
        from t_order
        where order_id = #{orderId}
    </select>

    <!-- resultMap标签：声明关联关系映射方式 -->
    <!-- id属性：给当前resultMap标签设定一个唯一标识，便于在需要的地方引用 -->
    <!-- type属性：封装最终数据的实体类对象的全类名，这里是Order对象 -->
    <resultMap id="selectOrderWithCustomerResultMap" type="com.stonebridge.mybatis.entity.Order">
        <!-- 第一部分：映射Order对象本身的属性 -->
        <!-- id标签或result标签：设定对应关系 -->
        <!-- column属性：指定数据库表字段名 -->
        <!-- property属性：指定Java实体类的属性名 -->
        <id column="order_id" property="orderId"></id>
        <result column="order_name" property="orderName"></result>
        <result column="customer_id" property="customerId"></result>

        <!-- 第二部分：映射关联关系 -->
        <!-- association标签：映射『对一(对方是一的一端)』关联关系 -->
        <!-- property属性：在当前实体类类型中，用来建立关联关系的属性名，这里是customer属性 -->
        <!-- javaType属性：被关联的实体类类型全类名 -->
        <association property="customer" javaType="com.stonebridge.mybatis.entity.Customer">
            <!-- 在association标签内部指定被关联的类型和表字段的对应关系 -->
            <id column="customerId" property="customer_id"></id>
            <result column="customerName" property="customer_name"></result>
        </association>
    </resultMap>
    <select id="selectOrderWithCustomer" resultMap="selectOrderWithCustomerResultMap">
        select order_id, order_name, a.customer_id
        from t_order a
                 left join t_customer b on a.customer_id = b.customer_id
        where order_id = #{orderId};
    </select>
</mapper>