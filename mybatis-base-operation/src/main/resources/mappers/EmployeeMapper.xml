<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在Java程序中，必须找到当前的Mapper配置文件，才能进一步找到这里配置的SQL语句 -->
<!-- Java程序就是通过mapper标签的namespace属性找到当前Mapper配置文件 -->
<!-- 将来为了让一个Java接口，直接对应这个Mapp|er配置文件，通常使用Java接口的全类名作为这个namespace属性的值 -->
<!-- 以前我们叫dao，现在叫mapper，本质上都是持久化层的类型，只是命名习惯的区别 -->
<mapper namespace="com.stonebridge.myBatis.dao.EmployeeMapper">

    <!-- select语句使用select标签<select></select> -->
    <!-- insert语句使用insert标签<insert></insert> -->
    <!-- update语句使用update标签<update></update> -->
    <!-- delete语句使用delect标签<delete></delete> -->

    <!-- 在select标签中编写一条select语句实现查询效果 -->
    <!-- id属性：这条SQL语句的唯一标识 -->
    <!-- resultType属性：Mybatis负责解析结果集，将解析得到的数据封装到Java类型中。resultType属性就是指定这个Java类型 -->
    <select id="selectEmpById" resultType="com.stonebridge.myBatis.domain.Emp">
        <!-- #{empId}这里是为了方便接收Java程序传过来的参数数据 -->
        <!-- Mybatis负责将#{empId}部分转换为"?"占位符 -->
        <!-- 如果查出表的字段和Java类型的字段不一致，可以通过取别名的方式实现-->
        select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{empId}
    </select>

    <!-- int insertEmp(Emp emp); -->
    <insert id="insertEmp">
        <!-- 现在在这条SQL语句中，#{}中的表达式需要被用来从Emp emp实体类中获取emp_name的值、emp_salary的值 -->
        <!-- 而我们从实体类中获取值通常都是调用getter()方法 -->
        <!-- 而getter()方法、setter()方法定义了实体类的属性 -->
        <!-- 定义属性的规则是：把get、set去掉，剩下部分首字母小写 -->
        <!-- 所以我们在#{}中使用getXxx()方法、setXxx()方法定义的属性名即可 -->
        INSERT INTO t_emp(emp_name,emp_salary) VALUES (#{empName},#{empSalary})
    </insert>
    <delete id="deleteEmp">
        DELETE
        FROM t_emp
        WHERE emp_id = #{empId}
    </delete>
    <!-- void updateEmp(Emp harry); -->
    <update id="updateEmp">
        UPDATE t_emp
        SET emp_name=#{empName},
            emp_salary=#{empSalary}
        where emp_id = #{empId}
    </update>

    <select id="selectEmpByName" resultType="com.stonebridge.myBatis.domain.Emp">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
        where emp_name like "%${name}%"
    </select>

    <insert id="createEmp">
        INSERT INTO t_emp(emp_id, emp_name, emp_salary)
        VALUES (#{empId}, #{name}, #{salary})
    </insert>
    <update id="updateEmployeeByMap">
        update t_emp
        set emp_salary=#{empSalaryKey}
        where emp_id = #{empIdKey}
    </update>

    <select id="selectEmpCount" resultType="int">
        select count(*)
        from t_emp
    </select>

    <!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 -->
    <!-- resultType属性：指定封装查询结果的Java实体类的全类名 -->
    <select id="selectEmployee" resultType="com.stonebridge.myBatis.domain.Emp">
        <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符 -->
        <!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 -->
        select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#{empId}
    </select>

    <!-- Map<String,Object> selectEmpNameAndMaxSalary(); -->
    <!-- 返回工资最高的员工的姓名和他的工资 -->
    <select id="selectEmpNameAndMaxSalary" resultType="map">
        SELECT emp_name                            员工姓名,
               emp_salary                          员工工资,
               (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资
        FROM t_emp
        WHERE emp_salary = (
            SELECT MAX(emp_salary)
            FROM t_emp
        )
    </select>

    <!-- List<Employee> selectAll(); -->
    <select id="selectAll" resultType="com.stonebridge.myBatis.domain.Emp">
        select emp_id empId, emp_name empName, emp_salary empSalary
        from t_emp
    </select>

    <!-- int insertEmployee(Employee employee); -->
    <!-- useGeneratedKeys属性字面意思就是“使用生成的主键” -->
    <!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 -->
    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="empId">
        insert into t_emp(emp_name,emp_salary)
        values(#{empName},#{empSalary})
    </insert>
</mapper>